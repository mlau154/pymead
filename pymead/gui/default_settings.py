import os
import numpy as np


def opt_settings_default():
    settings = {
        'Warm Start/Batch Mode': {
            'warm_start_active': {'label': 'Warm Start Active?', 'state': 0, 'widget_type': 'QCheckBox',
                                  'widgets_to_enable': [['Warm Start/Batch Mode', 'warm_start_generation'],
                                                        ['Warm Start/Batch Mode', 'warm_start_dir']]},
            'warm_start_generation': {'label': 'Warm Start Generation', 'widget_type': 'QSpinBox',
                                      'value': -1, 'lower_bound': -int(2 ** 32 / 2 - 1),
                                      'upper_bound': int(2 ** 32 / 2 - 1), 'tool_tip':
                                      'Choose \'-1\' to start from the most recent generation'},
            'warm_start_dir': {'label': 'Warm Start Directory', 'widget_type': 'QLineEdit', 'text': '',
                               'push_button': 'Choose folder', 'push_button_action': 'select_directory'},
            'use_initial_settings': {'label': 'Use Initial Settings?', 'state': 1, 'widget_type': 'QCheckBox'},
            'use_current_mea': {'label': 'Use Current MEA?', 'state': 1, 'widget_type': 'QCheckBox',
                                'widgets_to_disable': [['Warm Start/Batch Mode', 'mea_file']]},
            'mea_file': {'label': 'MEA File', 'widget_type': 'QLineEdit',
                         'push_button': 'Choose file',
                         'push_button_action': 'select_existing_mead_file', 'text': ''},
            'batch_mode_active': {'label': 'Batch Mode Active?', 'state': 0, 'widget_type': 'QCheckBox',
                                  'widgets_to_enable': [['Warm Start/Batch Mode', 'batch_mode_files']],
                                  'tool_tip': 'If this box is checked, all settings in this dialog will be\n'
                                              'overridden by the settings in the selected JSON settings files.'},
            'batch_mode_files': {'label': 'Batch Settings Files', 'widget_type': 'QPlainTextEdit',
                                 'texts': [''], 'push_button': 'Choose files',
                                 'push_button_action': 'select_multiple_json_files'},
        },
        'Genetic Algorithm': {
            'tool': {'label': 'CFD Tool:', 'widget_type': 'QComboBox', 'items': ['XFOIL', 'MSES'],
                     'current_text': 'XFOIL'},
            'J': {'label': 'Objective Functions:', 'widget_type': 'QLineEdit', 'text': '$Cd',
                  'tool_tip': 'Enter the objective functions to be minimized, separated by commas.\n'
                              'Variables can be started with the dollar sign ($).',
                  'text_changed_callback': 'objectives_changed'},
            'G': {'label': 'Constraints:', 'widget_type': 'QLineEdit', 'text': '',
                  'tool_tip': 'Enter the constraint functions to be applied, separated by commas.\n'
                              'Variables can be started with the dollar sign ($).',
                  'text_changed_callback': 'constraints_changed'},
            'additional_data': {'label': 'Additional Data', 'widget_type': 'QPlainTextEdit',
                                'texts': [''],
                                'tool_tip': 'Additional variables to feed to the\nobjective or constraint functions'},
            'pop_size': {'label': 'Population Size:', 'widget_type': 'QSpinBox', 'value': 50,
                         'lower_bound': 1, 'upper_bound': int(2 ** 32 / 2 - 1)},
            'n_offspring': {'label': 'Number of Offspring', 'widget_type': 'QSpinBox', 'value': 150,
                            'lower_bound': 50, 'upper_bound': int(2 ** 32 / 2 - 1),
                            'tool_tip': 'Number of offspring to generate to fill out the population.\n'
                                        'Offspring with converged objective functions become members of the\n'
                                        'current population until the population is full. Must be greater\n'
                                        'than or equal to the population size'},
            'eta_crossover': {'label': 'η (crossover)', 'widget_type': 'QDoubleSpinBox', 'value': 20.0,
                              'decimals': 3, 'lower_bound': 0.0, 'upper_bound': 1e5},
            'eta_mutation': {'label': 'η (mutation)', 'widget_type': 'QDoubleSpinBox', 'value': 15.0,
                             'decimals': 3, 'lower_bound': 0.0, 'upper_bound': 1e5},
            'random_seed': {'label': 'Random Seed', 'widget_type': 'QSpinBox', 'value': 1, 'lower_bound': 0,
                            'upper_bound': int(2 ** 32 / 2 - 1)},
            'num_processors': {'label': 'Number of Processors', 'widget_type': 'QSpinBox', 'value': os.cpu_count() - 1,
                               'lower_bound': 1, 'upper_bound': os.cpu_count()},
            'algorithm_save_frequency': {'label': 'State Save Frequency', 'widget_type': 'QSpinBox', 'value': 1,
                                         'lower_bound': 1, 'upper_bound': 1000,
                                         'tool_tip': 'How often to save the state of the genetic algorithm.\n'
                                                     'A value of \'1\' enforces a state save every generation'},
            'root_dir': {'label': 'Opt. Root Directory:', 'widget_type': 'QLineEdit',
                         'text': '', 'push_button': 'Choose folder',
                         'push_button_action': 'select_directory'},
            'opt_dir_name': {'label': 'Opt. Directory Name', 'widget_type': 'QLineEdit', 'text': 'ga_opt'},
            'temp_analysis_dir_name': {'label': 'Temp. Analysis Dir. Name', 'widget_type': 'QLineEdit',
                                       'text': 'analysis_temp'},
        },
        'Constraints/Validation': {
            'min_val_of_max_thickness': {'label': 'Minimum Thickness', 'widget_type': 'QDoubleSpinBox',
                                         'decimals': 16, 'lower_bound': 0.0, 'upper_bound': np.inf, 'value': 0.10,
                                         'active_checkbox': 0},
            'min_area': {'label': 'Mininmum Area', 'widget_type': 'QDoubleSpinBox',
                         'decimals': 16, 'lower_bound': 0.0, 'upper_bound': np.inf, 'value': 0.04,
                         'active_checkbox': 0},
            'use_internal_geometry': {'label': 'Internal Geometry Check?', 'widget_type': 'QCheckBox', 'state': 0},
            'internal_geometry_timing': {'label': 'Int. Geometry Timing', 'widget_type': 'QComboBox',
                                         'items': ['Before Aerodynamic Evaluation', 'After Aerodynamic Evaluation'],
                                         'current_text': 'Before Aerodynamic Evaluation',
                                         'tool_tip': 'The timing of the internal geometry fit check can be important\n'
                                                     'depending on whether the internal geometry should be rotated\n'
                                                     'with the airfoil angle of attack. If the internal geometry\n'
                                                     'can move with the airfoil angle of attack, '
                                                     'choose \'Before Aerodynamic Evaluation\' (faster).\nOtherwise, '
                                                     'choose \'After Aerodynamic Evaluation\' (slower).'},
            'internal_geometry': {'label': 'Internal Geometry File', 'widget_type': 'QLineEdit',
                                  'text': '', 'push_button': 'Choose file',
                                  'push_button_action': 'select_coord_file'},
            'use_external_geometry': {'label': 'External Geometry Check?', 'widget_type': 'QCheckBox', 'state': 0},
            'external_geometry_timing': {'label': 'Ext. Geometry Timing', 'widget_type': 'QComboBox',
                                         'items': ['Before Aerodynamic Evaluation', 'After Aerodynamic Evaluation'],
                                         'current_text': 'Before Aerodynamic Evaluation',
                                         'tool_tip': 'The timing of the external geometry fit check can be important\n'
                                                     'depending on whether the internal geometry should be rotated\n'
                                                     'with the airfoil angle of attack. If the external geometry\n'
                                                     'can move with the airfoil angle of attack, '
                                                     'choose \'Before Aerodynamic Evaluation\' (faster).\nOtherwise, '
                                                     'choose \'After Aerodynamic Evaluation\' (slower).'},
            'external_geometry': {'label': 'External Geometry File', 'widget_type': 'QLineEdit',
                                  'text': '', 'push_button': 'Choose file',
                                  'push_button_action': 'select_coord_file'},
        },
        'Termination': {
            'f_tol': {'label': 'Function Tolerance', 'widget_type': 'ScientificDoubleSpinBox', 'value': 2.5e-3,
                      'lower_bound': 0.0, 'upper_bound': 1e5},
            'cv_tol': {'label': 'Constraint Violation Tol.', 'widget_type': 'ScientificDoubleSpinBox',
                       'value': 1e-6, 'lower_bound': 0.0, 'upper_bound': 1e5},
            'x_tol': {'label': 'Parameter Tolerance', 'widget_type': 'ScientificDoubleSpinBox', 'value': 1e-8,
                      'lower_bound': 0.0, 'upper_bound': 1e5},
            'nth_gen': {'label': 'Termination Calc. Frequency', 'widget_type': 'QSpinBox', 'value': 10,
                        'lower_bound': 1, 'upper_bound': 1000000},
            'n_last': {'label': 'Num. Prev. Gens. to Check', 'widget_type': 'QSpinBox', 'value': 30,
                       'lower_bound': 1, 'upper_bound': 1000000},
            'n_max_gen': {'label': 'Maximum Generations', 'widget_type': 'QSpinBox', 'value': 500,
                          'lower_bound': 1, 'upper_bound': 1000000},
            'n_max_evals': {'label': 'Maximum Function Calls', 'widget_type': 'QSpinBox', 'value': 100000,
                            'lower_bound': 1, 'upper_bound': 1000000},
        },
        'XFOIL': {
            'Re': {'label': 'Reynolds Number', 'widget_type': 'QDoubleSpinBox', 'value': 1e5,
                   'decimals': 16, 'lower_bound': 0.00001, 'upper_bound': np.inf},
            'Ma': {'label': 'Mach Number', 'widget_type': 'QDoubleSpinBox', 'value': 0.0,
                   'decimals': 16, 'lower_bound': 0.0, 'upper_bound': 1.3},
            'prescribe': {'label': 'Prescribe ɑ/Cl/CLI', 'widget_type': 'QComboBox',
                          'items': ['Angle of Attack (deg)', 'Viscous Cl', 'Inviscid Cl'],
                          'combo_callback': 'change_prescribed_aero_parameter',
                          'current_text': 'Angle of Attack (deg)'},
            'alfa': {'label': 'Angle of Attack (deg)', 'widget_type': 'QDoubleSpinBox', 'value': 0.0,
                     'decimals': 16, 'lower_bound': -np.inf, 'upper_bound': np.inf, 'editable': True},
            'Cl': {'label': 'Viscous Cl', 'widget_type': 'QDoubleSpinBox', 'value': 0.0,
                   'decimals': 16, 'lower_bound': -np.inf, 'upper_bound': np.inf, 'editable': False},
            'CLI': {'label': 'Inviscid Cl', 'widget_type': 'QDoubleSpinBox', 'value': 0.0,
                    'decimals': 16, 'lower_bound': -np.inf, 'upper_bound': np.inf, 'editable': False},
            'xtr_upper': {'label': 'Transition x/c (upper)', 'widget_type': 'QDoubleSpinBox', 'value': 1.0,
                          'decimals': 16, 'lower_bound': 0.0, 'upper_bound': 1.0},
            'xtr_lower': {'label': 'Transition x/c (lower)', 'widget_type': 'QDoubleSpinBox', 'value': 1.0,
                          'decimals': 16, 'lower_bound': 0.0, 'upper_bound': 1.0},
            'N': {'label': 'Turbulence (NCrit)', 'widget_type': 'QDoubleSpinBox', 'value': 9.0,
                  'decimals': 16, 'lower_bound': 0.0, 'upper_bound': 20.0},
            'iter': {'label': 'Maximum Iterations', 'widget_type': 'QSpinBox', 'value': 150,
                     'lower_bound': 1, 'upper_bound': 10000},
            'timeout': {'label': 'Timeout (sec)', 'widget_type': 'QDoubleSpinBox', 'value': 8.0,
                        'lower_bound': 0.0, 'upper_bound': 10000.0},
        },
        'MSET': {},
        'MSES': {},
        'Save/Load Settings': {
            'settings_load_dir': {'label': 'Settings File (Load)', 'widget_type': 'QLineEdit',
                                  'push_button': 'Choose file',
                                  'push_button_action': 'select_existing_json_file', 'text': ''},
            'load_settings': {'label': 'Load Settings File', 'widget_type': 'QPushButton',
                              'click_connect': 'load_opt_settings', 'button_title': 'Load'},
            'settings_save_dir': {'label': 'Settings File (Save)', 'widget_type': 'QLineEdit',
                                  'push_button': 'Choose file',
                                  'push_button_action': 'select_any_json_file', 'text': ''},
            'save_settings': {'label': 'Save Settings File', 'widget_type': 'QPushButton',
                              'click_connect': 'save_opt_settings', 'button_title': 'Save'},
            'settings_saveas_dir': {'label': 'Settings Dir (Save As)', 'widget_type': 'QLineEdit',
                                    'push_button': 'Choose folder',
                                    'push_button_action': 'select_directory_for_json_file', 'text': ''},
            'settings_saveas_filename': {'label': 'Settings Filename (Save As)', 'widget_type': 'QLineEdit',
                                         'text': 'opt_settings.json'},
            'saveas_settings': {'label': 'Save Settings File As', 'widget_type': 'QPushButton',
                                'click_connect': 'saveas_opt_settings', 'button_title': 'Save As'},
        },
    }
    return settings


def xfoil_settings_default(mea_keys: list):
    settings = {
            'airfoil': {'label': 'Airfoil', 'widget_type': 'QComboBox', 'items': mea_keys, 'current_text': 'A0'},
            'Re': {'label': 'Reynolds Number', 'widget_type': 'QDoubleSpinBox', 'value': 1e5,
                   'decimals': 16, 'lower_bound': 0.00001, 'upper_bound': np.inf},
            'Ma': {'label': 'Mach Number', 'widget_type': 'QDoubleSpinBox', 'value': 0.0,
                   'decimals': 16, 'lower_bound': 0.0, 'upper_bound': 1.3},
            'prescribe': {'label': 'Prescribe ɑ/Cl/CLI', 'widget_type': 'QComboBox',
                          'items': ['Angle of Attack (deg)', 'Viscous Cl', 'Inviscid Cl'],
                          'combo_callback': 'change_prescribed_aero_parameter',
                          'current_text': 'Angle of Attack (deg)'},
            'alfa': {'label': 'Angle of Attack (deg)', 'widget_type': 'QDoubleSpinBox', 'value': 0.0,
                     'decimals': 16, 'lower_bound': -np.inf, 'upper_bound': np.inf, 'editable': True},
            'Cl': {'label': 'Viscous Cl', 'widget_type': 'QDoubleSpinBox', 'value': 0.0,
                   'decimals': 16, 'lower_bound': -np.inf, 'upper_bound': np.inf, 'editable': False},
            'CLI': {'label': 'Inviscid Cl', 'widget_type': 'QDoubleSpinBox', 'value': 0.0,
                    'decimals': 16, 'lower_bound': -np.inf, 'upper_bound': np.inf, 'editable': False},
            'xtr_upper': {'label': 'Transition x/c (upper)', 'widget_type': 'QDoubleSpinBox', 'value': 1.0,
                          'decimals': 16, 'lower_bound': 0.0, 'upper_bound': 1.0},
            'xtr_lower': {'label': 'Transition x/c (lower)', 'widget_type': 'QDoubleSpinBox', 'value': 1.0,
                          'decimals': 16, 'lower_bound': 0.0, 'upper_bound': 1.0},
            'N': {'label': 'Turbulence (NCrit)', 'widget_type': 'QDoubleSpinBox', 'value': 9.0,
                  'decimals': 16, 'lower_bound': 0.0, 'upper_bound': 20.0},
            'iter': {'label': 'Maximum Iterations', 'widget_type': 'QSpinBox', 'value': 150,
                     'lower_bound': 1, 'upper_bound': 10000},
            'timeout': {'label': 'Timeout (sec)', 'widget_type': 'QDoubleSpinBox', 'value': 8.0,
                        'lower_bound': 0.0, 'upper_bound': 10000.0},
            'body_fixed_csys': {'label': 'Body-fixed CSYS?', 'widget_type': 'QCheckBox', 'state': 0,
                                'tool_tip': 'Select if the airfoil should be analyzed with dx=dy=alf=0.0 and c=1'},
            'airfoil_analysis_dir': {'label': 'Analysis Directory', 'widget_type': 'QLineEdit',
                                     'push_button': 'Choose folder',
                                     'push_button_action': 'select_directory_for_airfoil_analysis', 'text': ''},
            'airfoil_coord_file_name': {'label': 'Airfoil Coord. Filename', 'widget_type': 'QLineEdit',
                                        'text': 'default_airfoil'},
        }
    return settings
